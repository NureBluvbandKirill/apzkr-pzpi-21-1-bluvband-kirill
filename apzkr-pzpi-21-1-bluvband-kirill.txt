Міністерство освіти та науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії

КУРСОВА РОБОТА 
ПОЯСНЮВАЛЬНА ЗАПИСКА
з дисципліни «Архітектура програмного забезпечення»
Тема роботи: «Розробка програмного рішення для управління ланцюгом поставок термочутливих товарів»

Виконав 	
ст. гр. ПЗПІ-21-1                                                                                          Блувбанд К. І.

Керівник: 
доц. каф. ПІ	         	        Лещинський В. О.

Робота захищена на оцінку                                                      	        _______________

Комісія:
доц. каф. ПІ	         	        Лещинський В. О.
доц. каф. ПІ	         		  Лещинська І. О.
ст. викл. каф. ПІ	         		     Сокорчук І. П.


	Харків 2024
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук         Кафедра програмної інженерії	      
Спеціальність 121 – Інженерія програмного забезпечення	
Курс           3		 Семестр  			            6				____        
Навчальна дисципліна Архітектура програмного забезпечення	

ЗАВДАННЯ
НА КУРСОВУ РОБОТУ СТУДЕНТА
Блувбанд Кіріллу Ігоровичу
1.	Тема роботи: «Розробка програмного рішення для управління ланцюгом поставок термочутливих товарів»	
2.	Термін узгодження завдання курсової роботи «1» квітня 2024 р.
3.	Термін здачі студентом закінченої роботи «16» червня 2024 р.
4.	Вихідні дані до проекту (роботи): В програмній системі передбачити:
реалізація двох компонентів (Back-end, IoT), унікальність, можливість заробітку, актуальність, розповсюдженість, масштабованість, локалізація, забезпечення конфіденційності та адміністрування системи	
5.	Зміст пояснювальної записки (перелік питань, що належить розробити)
вступ, аналіз предметної області, постановка задачі, проєктування програмного проєкту, структура бази даних, розробка програмного проєкту, опис розробленої програмної системи, висновки, перелік посилань, додатки	
6.	Перелік графічного матеріалу (з точним зазначенням обов’язкових креслень) Deployment Diagram, Use Case Diagram, Entity-Relationship Model, Interaction Overview Diagram,  Activity Diagram, State Diagram, Component Diagram, Package Diagram	
КАЛЕНДАРНИЙ ПЛАН

Номер	Назва етапів курсової роботи	Строк виконання етапів роботи	Примітки
1	Функціональна специфікація
програмного проєкту	31.03.24	
2	Проєктування програмного
проєкту	30.04.24	
3	Кодування програмного проєкту	20.05.24	
4	Оформлення пояснювальної
записки	31.05.24	
5	Захист курсової роботи	08.06.24	

Дата видачі завдання «1» квітня 2024 р.
Керівник	__________________ доц. Лещинський В.О.
(підпис)
Завдання прийняв до виконання
ст. гр. ПЗПІ-21-1	                 Блувбанд К. І.
(підпис)


 
РЕФЕРАТ

	Пояснювальна записка до курсової роботи: 57 с., 16 рис., 3 табл. 3 додатки, 5 джерел.
	АДМІНІСТРАТОР, КЛІЄНТ, ДАТЧИК, КОРИСТУВАЧ, ПРОГРАМНА СИСТЕМА.
	Об’єктом дослідження є галузь управління ланцюгом поставок термочутливих товарів, а саме створення програмної системи для управління ланцюгом поставок термочутливих товарів використовуючи технології IoT.
	Метою курсової роботи є розробка програмного рішення, яке дозволяє оптимізувати управління ланцюгом поставок термочутливих товарів. Це програмне рішення дозволить користувачам відстежувати стан товарів протягом усього ланцюга поставок, отримувати сповіщення про порушення температурного режиму та вживати заходів для запобігання псування продукції.
Методи розробки базуються на технології ASP.NET Web API та мові програмування C#, бази даних на ядрі Microsoft SQL Server, інтеграції IoT-пристроїв з програмним забезпеченням.
В результаті роботи було розроблено програмне рішення для оптимізації управління ланцюгом поставок термочутливих товарів. Це програмне рішення складається з серверної частини для обробки даних, веб-додатку для користувачів та серверу для інтеграції з датчиками температури.
 
ЗМІСТ
	

Вступ	7
1 Аналіз предметної області	8
    1.1 Бізнес-вимоги	8
        1.1.1 Бізнес-можливості	8
        1.1.2 Бізнес-цілі та критерії успіху	9
        1.1.3 Потреби клієнтів або ринку	10
        1.1.4 Бізнес-ризики	11
    1.2 Концепція рішення	12
        1.2.1 Окреслення концепції	12
        1.2.2 Головна функціональність	13
        1.2.3 Припущення та залежності	15
    1.3 Рамки та обмеження проєкту	16
        1.3.1 Рамки первинного випуску	16
        1.3.2 Рамки наступних випусків	19
        1.3.3 Обмеження та винятки	20
    1.4 Бізнес-контекст	21
        1.4.1 Профілі зацікавлених сторін	21
        1.4.2 Пріоритети проєкту	22
        1.4.3 Робоче середовище	23
2 Постановка задачі	25
3 Проєктування бази даних	26
    3.1 Побудова ER-діаграми	26
    3.2 Побудова логічної моделі бази даних на основі ER-діаграми	28
4 Архітектура програмної системи	34
    4.1 Архітектура серверної частини	34
    4.2 Архітектура IoT частини	36
    4.3 Архітектура клієнтської частини	39
5 Опис програмної системи	42
    5.1 Виклик і завантаження	45
    5.2 Призначення і логічна структура	49
    5.3 Опис програмної реалізації	51
Висновки	52
Перелік джерел посилання	53
Додаток А Результат перевірки на плагіат	54
Додаток Б Програмний код серверної частини	56
Додаток В Програмний код IoT пристрою	57
 
ВСТУП


	Сучасні ланцюги поставок стикаються з викликом забезпечення збереження термочутливих товарів протягом усього шляху від виробника до споживача. Це особливо важливо, оскільки псування продукції може призвести до значних фінансових втрат та шкоди репутації. Доступ до точної інформації про стан товарів в режимі реального часу є критично важливим для прийняття ефективних управлінських рішень та подальшого бізнес планування.
Технологіх та підходи, дозволяючі вчасно відстежувати стан товарів та реагувати на будь-які порушення температурного режиму, неймовірно потрібні, наприклад через використання новітніх способів аналізу датчиків та їх даних.
Моє програмне рішення є інноваційним підхом до оптимізації управління ланцюгом поставок. Використовуючі нові датчики температури та відображення данних у реальному часі, клієнт буде впевнений у безпеці свого вантажу, а також сповістити логістичних працівників та постачальників у разі непередбачуванної ситуації.
Головна мета - підвищити ефективність управління ланцюгом поставок термочутливих товарів, мінімізувати псування продукції та зберегти її якість протягом усього шляху до споживача.
 
АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1	Бізнес-вимоги
1.1.1	Бізнес-можливості


Аналоги:
¬ –		CargoTrack – ця компанія пропонує комплексні системи відстеження вантажів, що ґрунтуються на GPS-моніторингу. Їхні рішення надають користувачам можливість відстежувати рух вантажів у режимі реального часу, отримувати сповіщення про місцезнаходження та зміни маршруту. Проте, система CargoTrack не володіє функціями моніторингу мікроклімату під час транспортування, таких як контроль температури.
–		SensorLink – цей продукт орієнтований на віддалений контроль стану вантажу та умов його зберігання. Він включає в себе датчики для відстеження температури, вологості та інших параметрів у режимі реального часу. Однак, система SensorLink може бути занадто дорогою для невеликих перевізників та не завжди сумісна з іншими логістичними платформами.
–		SecureRap – ця компанія спеціалізується на програмному забезпеченні для оптимізації маршрутів перевезень, що забезпечує точний моніторинг руху вантажів. Їхні рішення пропонують інструменти для аналізу оптимальних маршрутів, прогнозування часу доставки та генерування звітів. Проте, система SecureRap може бути складною у впровадженні та потребувати додаткового обладнання.
Продукт «ThermoTsev» позиціонується на ринку логістики та вантажоперевезень. Основна стратегія монетизації полягає у співпраці з транспортними компаніями, логістичними операторами та виробничими підприємствами, надаючи їм зручний та універсальний інструмент для відстеження та контролю за умовами транспортування вантажів.


1.1.2 Бізнес-цілі та критерії успіху


БЦ-1: Забезпечити передові рівні безпеки та ефективності перевезень вантажів:
БЦ-1.1: Розробити інтуїтивно зрозумілий інтерфейс та функціональність, що відповідають потребам перевізників та клієнтів. Запропонувати веб- та мобільні інтерфейси для зручного моніторингу та управління перевезеннями.
БЦ-1.2: Створити інтерфейс для збору та відстеження даних з GPS-пристроїв та датчиків безпеки в режимі реального часу.

КУ-1: Досягнення 85% рівня задоволеності користувачів:
КУ-1.1: Проводити опитування користувачів кожні півроку для оцінки задоволеності та збору відгуків.

БЦ-2: Розширити користувацьку базу за допомогою партнерських відносин з перевізниками та логістичними компаніями:
БЦ-2.1: Запровадити маркетингові кампанії для просування ThermoTsev серед потенційних користувачів.

КУ-2: Надійність та точність системи
КУ-2.1: Гарантувати точність відстеження перевезень на рівні 90% або вище.
КУ-2.2: Забезпечити безперебійну роботу системи сповіщень у разі аварійних ситуацій.
БЦ-3: Підвищити оперативність та ефективність служб безпеки та логістики:
БЦ-3.1: Автоматизувати систему сповіщень про надзвичайні ситуації на маршрутах.
БЦ-3.2: Надавати детальну аналітику даних про перевезення для оптимізації маршрутів та зниження ризиків.

КУ-3: Підвищення ефективності служб
КУ-3.1: Зменшити час реагування на надзвичайні ситуації на 27%.
КУ-3.2: Забезпечити інтеграцію ThermoTsev у не менше ніж 70% логістичних компаній регіону.


1.1.3 Потреби клієнтів або ринку


	Аналіз ринкових потреб виявив ключові виклики та проблеми, з якими стикаються компанії у сфері безпечних перевезень вантажів. Основні потреби клієнтів та ринку можна сформулювати таким чином:
П-1: Оперативні сповіщення про стан вантажу.
П-2: Адаптивна інтеграція з GPS-системами та іншими платформами для надійного управління перевезеннями в різних умовах.
П-3: Ефективне відстеження вантажів у реальному часі.
П-4: Технології забезпечення конфіденційності даних.
П-5: Засоби для глибокого аналізу даних про перевезення.
П-6: Інтуїтивно зрозумілий та зручний інтерфейс.


1.1.4 Бізнес-ризики


Технічні ризики: можливі технічні збої або відмови під час розробки системи, що може призвести до порушення якості та надійності процесу перевезення вантажівд час розробки можуть виникнути технічні збої або відмови, що призведуть до порушення якості перевезень вантажів.
Дії: Проведення ретельного тестування програмного забезпечення на всіх етапах розробки.
Ризики, пов'язані з ринком: недостатнє прийняття та зацікавленість цільового ринку в інноваційних рішеннях для безпечного перевезення вантажів.
Дії: Розробка чіткої маркетингової стратегії та планування подальших маркетингових кампаній, що підкреслюють цінність, надійність та новітність системи.
Фінансові ризики: обмеженість фінансування для реалізації всіх етапів проекту, включаючи дослідження, розробку, тестування, маркетинг та впровадження.
Дії: скласти детальний бюджет, який враховує всі витрати, пов'язані з проектом, включаючи дослідження, розробку, тестування, маркетинг, впровадження та поточні експлуатаційні витрати. Активно шукати та подавати заявки на державні гранти та програми підтримки малого та середнього бізнесу, які можуть допомогти фінансувати проект.


1.2 Концепція рішення
1.2.1 Окреселення концепції


Проект "ThermTsev" пропонує інноваційне рішення для безпеки вантажних перевезень, що виходить за рамки простого відстеження маршруту. Система поєднує в собі функції моніторингу фізичного місцезнаходження вантажів з контролем умов їх транспортування. Це робить "ThermoTsev" особливо цінним інструментом для компаній, які оперують на сучасному ринку, де зростають вимоги до якості та своєчасності доставки, а також збільшується частка міжнародних вантажних перевезень..
Мета проекту – надати користувачам всебічний контроль над процесом перевезення вантажів, від моменту завантаження до вивантаження. Завдяки "ThermoTsev" можна не лише відстежувати місцезнаходження вантажів у режимі реального часу, але й гарантувати, що умови їх транспортування відповідають встановленим стандартам. Це особливо важливо для перевезення харчових продуктів, медикаментів, та інших товарів, які потребують особливих умов транспортування.
"ThermoTsev" стає мостом між перевізниками та їхніми клієнтами, надаючи їм надійні інструменти для забезпечення найвищого рівня безпеки та якості послуг у сфері вантажних.
Таким чином, "ThermoTsev" не просто інноваційна система відстеження, а й платформа для налагодження партнерських відносин та взаємовигідної співпраці між усіма учасниками логістичного ланцюжка.


1.2.2 Головна функціональність 


MF-1: Реєстрація та авторизація користувачів в системі за допомогою мобільного додатку або веб-інтерфейсу.
MF-2: Відстеження вантажів у реальному часі за допомогою GPS-сенсорів, що дозволяє користувачам бачити маршрут перевезення та його актуальний статус.
MF-3: Контроль умов транспортування за допомогою системи, яка збирає дані про умови перевезення, такі як температура, що дає можливість гарантувати, що вантажі транспортуються в оптимальних умовах.
MF-4: Автоматичні сповіщення надсилаються користувачам у випадку будь-яких відхилень від встановлених параметрів перевезення, що дозволяє негайно реагувати на нештатні ситуації та вживати необхідних заходів для збереження вантажів.
MF-5: Замовлення транспортування можливе безпосередньо через мобільний додаток, що економить час та спрощує процес організації перевезень.
MF-6: Управління користувачами та перевезеннями використовуючи веб-сайт системи, що надає доступ до розширених функцій управління користувачами та перевезеннями, клієнтам та адміністраторам системи.
MF-7: Сторінка аналітики, яка відображає статистику перевезень, за домогою якої користувачі можуть отримувати детальні звіти про маршрути, умови транспортування, час доставки та інші важливі показники.
MF-8: Технічна підтримка в розв'язанні проблем та консультація щодо використання системи.

1.2.3 Припущення та залежності


Припущення:
1.	Припускається, що пристрої мають необхідний cтабільний доступ до Інтернету для передачі даних з IoT-пристроїв на сервери системи.
2.	Припускається, що всі транспортні засоби, які беруть участь у системі, мають бути оснащені необхідними IoT-пристроями для збору даних про місцезнаходження, умови транспортування та інші важливі параметри.
3. Припускається, що сервери та система мають достатню продуктивність для обробки великих обсягів даних в режимі реального часу.
4.	Припускається, що всі користувачі системи мають сумісні мобільні пристрої для використання мобільного додатку “ThermoTsev”.
Залежності:
1. Залежність від безперебійного електроживлення IoT-пристроїв на транспортних засобах.
2. Залежність від безперебійної роботи та надійності IoT-пристроїв, встановлених на транспортних засобах.
3. Залежність від постійного з’єднання з MQTT брокером для забезпечення зв'язку між IoT-пристроями та сервером.
4. Залежність від наявності стабільного доступу до Інтернету та мобільних мереж для передачі даних з IoT-пристроїв на сервери.

1.3 Рамки та обмеження проєкту
1.3.1 Рамки первинного випуску


Користувачі веб-застосунку «ThermoTsev» матимуть можливість:
– 	Реєстрація та авторизація: Забезпечує захищений доступ до системи за допомогою унікальних логінів та паролів.
–	Відстеження перевезень у режимі реального часу: Користувачі можуть бачити актуальний статус та місцезнаходження своїх вантажів на карті.
–	Автоматичні сповіщення: Система надсилає автоматичні повідомлення про зміни статусу перевезення, затримки або надзвичайні ситуації.
–	Детальні звіти про перевезення: Користувачі можуть генерувати детальні звіти про кожне перевезення, включаючи маршрут, час доставки, умови транспортування та інші важливі параметри.
–	Налаштування параметрів безпеки: Адміністратори можуть налаштовувати рівень безпеки для різних типів вантажів та перевезень.
Функціональні можливості IoT-підключення:
–	Збір даних: IoT-датчики, встановлені на транспортних засобах, збирають дані про рух, стан вантажу, температуру та інші важливі параметри.
–	Передача даних: Зібрані дані передаються на сервери системи "ThermoTsev" для подальшої обробки та аналізу.
Функціональні можливості мобільного застосунку «ThermoTsev»:
–	Реєстрація та авторизація: Швидкий доступ до системи з мобільного пристрою.
–	Відстеження перевезень у реальному часі: Користувачі можуть відстежувати статус та місцезнаходження своїх вантажів на карті прямо зі свого смартфона.
–	Автоматичні сповіщення: Сповіщення про зміни статусу перевезення або надзвичайні ситуації будуть надходити прямо на мобільний пристрій.


1.3.2 Рамки наступних випусків


Користувачі веб-застосунку «ThermoTsev» зможуть:
–	Доступ до історичних даних: Користувачі зможуть відстежувати, аналізувати та візуалізувати дані про минулі перевезення. Це дозволить їм отримати цінні знання про маршрути, умови транспортування, час доставки та інші важливі параметри.
–	Управління датчиками: Адміністратори матимуть доступ до налаштування та керування датчиками, встановленими на транспортних засобах. Це дасть їм можливість оптимізувати збір даних та отримувати точну інформацію про стан вантажів, рух та інші фактори.
–	Підтримка користувачів: Адміністратори зможуть відповідати на запити та вирішувати проблеми користувачів через спеціалізовану службу технічної підтримки. Це забезпечить високий рівень обслуговування та допоможе користувачам максимально використовувати можливості системи.
Користувачі мобільного застосунку «ThermoTsev» зможуть:
–	Перегляд історичних даних: Користувачі зможуть переглядати історію своїх перевезень та отримувати доступ до звітів. Це дозволить їм відстежувати тенденції, виявляти проблемні ділянки та приймати обґрунтовані рішення щодо оптимізації логістики.
–	Звернення до служби підтримки: Користувачі зможуть легко зв'язатися зі службою технічної підтримки прямо з мобільного застосунку. Це дозволить їм швидко отримувати допомогу у разі виникнення проблем або запитань.
Система "ThermoTsev" надає користувачам комплексну технічну підтримку, включаючи допомогу у вирішенні проблем, консультації з використання системи та доступ до спеціалізованого відділу підтримки.


1.3.3 Обмеження та винятки


–	Залежність від зв'язку з датчиками: Для отримання актуальних даних про стан вантажів та транспортних засобів система "ThermoTsev" потребує безперебійного зв'язку з датчиками, встановленими на транспортних засобах. У разі втрати зв'язку інформація може бути затримана або тимчасово недоступна.
– 	Неповні дані від датчиків: У деяких випадках датчики можуть не надавати повний обсяг інформації через технічні несправності або обмеження датчика.
–	Залежність від Інтернету: Для дистанційного керування та взаємодії з системою "ThermoTsev" користувачам потрібне стабільне підключення до Інтернету.


1.4 Бізнес-контекст
1.4.1 Профілі зацікавлених сторін


	На таблиці 1.1 описані профілі зацікавлених сторін:
Таблиця 1.1 – Профілі зацікавлених сторін проекту

Зацікавлена сторона	Головна
цінність	
Ставлення	
Головний інтерес	
Обмеження
Власники вантажу	Швидке відстеження місця розташування вантажу	Позитивне	Покращення безпеки вантажу	Наявність доступу до системи моніторингу
Менеджери логістики	Оптимізація маршрутів	Нейтральне	Ефективне управління транспортними засобами	Доступність зв’язку з водієм
Клієнти	Відсутність потреби в паперовій документації	Позитивне	Зручність використання сервісу	Можливість замовлення через додаток
Оператори складу	Попередження аварійних ситуацій	Позитивне	Контроль умов перевезення	Аналіз даних з IoT пристроїв


1.4.2 Пріорітети проєкту


	На таблиці 1.2 наведені пріорітети проєкту:
Таблиця 1.2 – Пріоритети проекту
Показник	Виконання (етапи)	Обмеження
(граничні значення)	Ступінь свободи
(допустимий діапазон)

Розклад/план робіт		Продукт має бути випущеним приблизно до 05.06.2024	Можливе відхилення від графіку на 1.5-3 місяці
Функціональність			100% функціоналу має працювати на релізі 1.0
Ціна		~137 500 гривень	Допустиме відхилення на 20%
Персонал		Максимальний розмір команди це 1 розробник	
Якість			99.99% всіх наявних данних з датчиків повинні бути вірними 


1.4.3 Робоче середовище


Цей продукт буде доступний через браузер або мобільний телефон, ґрунтуючись на масштабованій, ефективній архітектурі, що здатна інтегрувати дані з різних джерел у режимі реального часу.
Технології, використані в розробці:
–	Інтерфейс: React.JS, TypeScript, UI Library
–	Back-end: .NET 8, ASP .NET Core Web API
–	Мобільний додаток: React Native
–	База даних: Amazon Relational Database Service (RDS)
–	IoT: Arduino IDE, Брокер IoT Core MQTT, модулі температури, GPS.
–	Зовнішні API: Google Maps API.
 
2	ПОСТАНОВКА ЗАДАЧІ


Відповідно до попереднього аналізу предметної області, завданням курсової роботи було поставлено розробку програмного рішення для оптимізації управління ланцюгом поставок термочутливих товарів.
База даних повинна включати інформацію про:
–	Користувачів: Ім'я, прізвище, контактна інформація, роль (логістичний працівник, постачальник, адміністратор);
–	Товари: Назва, код товару, опис, температурний режим, дані про постачальника;
–	Дані з датчиків: Температура, час, місце розташування товару
–	Звіти: Історія температурного режиму, порушення температурного режиму, дані про псування товарів;
Для користувачів має бути реалізований наступний функціонал:
–	Реєстрація та вхід в систему: Створення облікового запису, авторизація;
–	Перегляд та редагування своїх даних: Персональна інформація, налаштування оповіщень;
–	Відстеження стану товарів: Поточний стан, історія температурного режиму, оповіщення про порушення;
–	Перегляд звітів: Історія температурного режиму, дані про псування товарів.
Для адміністратора системи має бути реалізований такий функціонал:
–	Вхід в систему: Авторизація з розширеними правами;
–	Керування користувачами: Створення, редагування, видалення користувачів, присвоєння ролей;
–	Перегляд звітів: Історія температурного режиму, дані про псування товарів, статистика по користувачам та товарам;
–	Керування датчиками: Додавання, редагування, видалення датчиків, калібрування;
Також, програмне рішення має підтримувати локалізацію та інтернаціоналізацію:
–	Підтримка мов: Переклад інтерфейсу користувача та звітів на різні мови;
–	Формат дати й часу: Використання локального формату дати й часу для користувачів;
–	Одиниці вимірювання: Можливість вибору метричних або імперських одиниць вимірювання;
–	Сортування тексту: Використання локального порядку сортування тексту;
–	Введення тексту: Підтримка різних напрямів введення тексту
 
3	ПРОЄКТУВАННЯ БАЗИ ДАНИХ
3.1 Побудова ER-діаграми


Для проектування бази даних було розроблено ER-діаграму (див. рис. 1). Вона складається з 6 таблиць: користувачі (User), екстренні повідомлення (EmergencyNotification), перевезення (Shipment), розташування доставок (DeliveryLocation), деталі перевезення (ShipmentInfo), аналітика (AnalyticsDetail).
 
Рисунок 3.1 – ER-діаграма проєкту
У базі даних між сутностями є такі зв’язки:
	¬−	Користувач – Повідомлення (1:М, бо кожен користувач може мати кілька повідомлень).
	−	Користувач – Перевезення (1:М, бо кожен користувач може мати кілька пов’язаних з ним перевезень).
	−	Перевезення  –  Розташування (1:М, бо кожне перевезення може мати декілька розташувань).
	−	Перевезення –  Умови перевезення (1:1, бо кожне перевезення може мати тільки одні умови перевезення).
	−	Перевезення  –  Аналітика (1:М, бо кожне перевезення може мати декілька аналітичних даних, таких як температура).
.
3.2 Побудова логічної моделі бази даних на основі ER-діаграми


	Для забезпечення нормалізації бази даних, варто усунути зв’язки «багато-до-багатьох» між сутностями.
	Отже, у логічній моделі бази даних будуть представлені такі сутності:
−	Користувачі (User);
−	Сповіщення про надзвичайні ситуації (EmergencyNotification);
−	Аналітичні деталі (AnalyticsDetail);
−	Місця доставки (DeliveryLocation);
−	Відправлення (Shipment);
−	Інформація про відправлення (ShipmentInfo);
Створимо таблицю користувачів (User). Вона буде містити у собі такі атрибути: Id (первинний ключ), Name, Email, HashedPassword, PasswordSalt.
Перевіримо таблицю User на відповідність нормалізації:
–	атомарність атрибутів: Всі атрибути повинні містити лише одне значення, а не множину значень;
–	відсутність повторюваності даних: В таблиці не повинно бути дублюючихся записів з однаковими значеннями в усіх полях;
–	залежність неключових атрибутів: Всі неключові атрибути повинні однозначно визначатися значенням первинного ключа.
Отже, таблиця задовольняє першій, другій і третій нормальним формам.
Створимо таблицю сповіщень про надзвичайні ситуації (EmergencyNotification). Вона буде містити у собі такі атрибути: Id (первинний ключ), Message, IsRead.
Перевіримо таблицю EmergencyNotification на відповідність нормалізації:
–	атомарність атрибутів: Всі атрибути повинні містити лише одне значення, а не множину значень;
–	відсутність повторюваності даних: В таблиці не повинно бути дублюючихся записів з однаковими значеннями в усіх полях;
–	залежність неключових атрибутів: Всі неключові атрибути повинні однозначно визначатися значенням первинного ключа.
Отже, таблиця задовольняє першій, другій і третій нормальним формам.
Створимо таблицю аналітичних деталей (AnalyticsDetail). Вона буде містити у собі такі атрибути: Id (первинний ключ), MetricTitle, MetricValue, Timestamp.
Перевіримо таблицю AnalyticsDetail на відповідність нормалізації:
–	атомарність атрибутів: Всі атрибути повинні містити лише одне значення, а не множину значень;
–	відсутність повторюваності даних: В таблиці не повинно бути дублюючихся записів з однаковими значеннями в усіх полях;
–	залежність неключових атрибутів: Всі неключові атрибути повинні однозначно визначатися значенням первинного ключа.
Отже, таблиця задовольняє першій, другій і третій нормальним формам.
Створимо таблицю місць доставки (DeliveryLocation). Вона буде містити у собі такі атрибути: Id (первинний ключ), Latitude, Longitude.
Перевіримо таблицю DeliveryLocation на відповідність нормалізації:
–	атомарність атрибутів: Всі атрибути повинні містити лише одне значення, а не множину значень;
–	відсутність повторюваності даних: В таблиці не повинно бути дублюючихся записів з однаковими значеннями в усіх полях;
–	залежність неключових атрибутів: Всі неключові атрибути повинні однозначно визначатися значенням первинного ключа.
Отже, таблиця задовольняє першій, другій і третій нормальним формам.
Створимо таблицю відправлень (Shipment). Вона буде містити у собі такі атрибути: Id (первинний ключ), StartDate, OriginatingDeliveryLocationId (зовнішній ключ), EndDate, DestinationDeliveryLocationId (зовнішній ключ).
Перевіримо таблицю Shipment на відповідність нормалізації:
–	атомарність атрибутів: Всі атрибути повинні містити лише одне значення, а не множину значень;
–	відсутність повторюваності даних: В таблиці не повинно бути дублюючихся записів з однаковими значеннями в усіх полях;
–	залежність неключових атрибутів: Всі неключові атрибути повинні однозначно визначатися значенням первинного ключа.
Отже, таблиця задовольняє першій, другій і третій нормальним формам.
Створимо таблицю інформації про відправлення (ShipmentInfo). Вона буде містити у собі такі атрибути: Id (первинний ключ), MinAllowedTemperature, MaxAllowedTemperature, ShipmentId (зовнішній ключ).
Перевіримо таблицю ShipmentInfo на відповідність нормалізації:
–	атомарність атрибутів: Всі атрибути повинні містити лише одне значення, а не множину значень;
–	відсутність повторюваності даних: В таблиці не повинно бути дублюючихся записів з однаковими значеннями в усіх полях;
–	залежність неключових атрибутів: Всі неключові атрибути повинні однозначно визначатися значенням первинного ключа.
Отже, таблиця задовольняє першій, другій і третій нормальним формам.
За результатами проектування таблиць та зв’язків майбутньої бази даних, було отримано її логічну схему, яка задовольняє першій, другій і третій нормальним формам (див. рис. 3.2).
 
Рисунок 3.2 – Логічна схема бази даних

Оскільки всі таблиці в логічній схемі бази даних знаходяться в третій нормальній формі, можна зробити висновок, що база даних загалом відповідає третій нормальній формі.
 
4 АРХІТЕКТУРА ПРОГРАМНОЇ СИСТЕМИ
4.1 Архітектура серверної частини


Головні учасники в системі ThermoTsev: адміністратори перевезень та користувачі. Кожна група користувачів взаємодіє з системою через веб-інтерфейс, мобільний застосунок. Для кращого розуміння та узгодженості взаємодії була розроблена UML-діаграма прецедентів, яку можна знайти в додатку А, рисунок А.1.
Веб-інтерфейс надає адміністраторам можливість ефективно керувати перевезеннями, дивитись аналітику та статистику по системі та всім перевезенням, налаштовувати параметри безпеки.
Користувачі в мобільному застосунку матимуть можливість відстеження перевезень у реальному часі та керування своїм перевезенням, отримувати автоматичні сповіщення про зміни статусу перевезення або надзвичайні ситуації.
IoT-прилади використовуються для під’єднання датчиків до транспортних засобів, які будуть збирати і передавати дані про рух, стан вантажу та інші важливі параметри такі як температура.
Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів (див. рис. 4.1).
 
Рисунок 4.1 – Діаграма прецедентів серверної частини програмної системи
Для написання серверної частини системи було обрано мову програмування C# з використанням технології ASP.NET Core Web API, яка дозволяє писати ефективний та масштабований код швидко.
У якості бази даних використано MS SQL Server, до якої здійснюється доступ з серверного застосунку за допомогою технології Entity Framework Core, ORM бібліотеки, яка дозволяє мати взаємодію з базою даних через об’єкти, класи в мові C#, без написання коду на SQL. 
Для детальнішої візуалізації використаних технологій було розроблено діаграму розгортання (див. рис. 4.2).
 
Рисунок 4.2 – Діаграма розгортання серверної частини програмної системи
Для тестування та презентації API використовується OpenApi Swagger, веб-інструмент для перегляду API ендпоінтів, та дає можливість відправляти запити на ці ендпоінти під час розробки та тестування. Для забезпечення безпеки даних та конфіденційності використовується захищений протокол HTTPS, який захищає дані під час їх передачі.
Бібліотека System.Security.Cryptography застосовується для хешування паролів, а JWT (Json Web Tokens) - для створення токенів авторизації, забезпечуючи надійний та безпечний механізм управління доступом користувачів. Передача та отримання даних здійснюються за допомогою REST API.
Розроблений серверний застосунок побудований за принципами трьох-шарової архітектури та колекції принципів Domain Driven Design, яка складається з: Domain, DAL, BLL та API.
В архітектуру також були додані міддлвейри (Middlewares), які перехоплюють запити, контролюючи доступи до даних за ролями. Система використовує міддлвейр JwtMiddleware, який валідує токен, юзера та роль юзера. Також, використовуюється middleware Authorize. Архітектура серверного (Back-End) застосунку представлена на діаграмі пакетів (див. рис. 4.3).
 
Рисунок 4.3 – Діаграма пакетів серверної частини програмної системи

Приклади коду серверної частини наведено в додатку Б. Таким чином, були визначені технології та архітектура серверної частини програмної системи.


4.2 Архітектура ІоТ-частини


IoT частина системи взаємодіє з перевезеннями та повертає інформацію, про стан вантажу та його локацію. Взаємодія користувачів з IoT частиною системи представлено на діаграмі прецедентів (див. рис. 4.4).
 
Рисунок 4.4 – Діаграма прецедентів ІоТ частини програмної системи
	Для демонстрації функціональних можливостей IoT частини системи, було вирішено реалізувати програмний код мовою програмування C# та фреймворком .NET 8, що максимально відповідає обмеженням апаратних ресурсів IoT пристроїв. Для виведення інформації використовую консольний інтерфейс (CLI). Надсилання даних реалізовано за допомогою бібліотеки System.Net.Http, а сами дані передаються у форматі JSON.
Програма призначена для тривалого доступу на сервері, де існує таблиця з ідентифікаторами, які можна присвоїти IoT пристрою. Це надає можливість записувати показники датчика протягом тривалого періоду.
Код програми написано з мінімальною кількістю рядків для оптимізації під пристрої з обмеженою потужністю. Крім того, програма легко портується на реальні IoT пристрої.
Для більш детальної візуалізації взаємодії пристрою з користувачами системи було розроблено діаграму взаємодії (див. рис. 4.5).
 
Рисунок 4.5 -  Діаграма взаємодії ІоТ частини програмної системи
	Для запуску додатку ThermoTsev, з початку потрібно налаштувати пристрій, потім увімкнути його та підключитися до Wi-Fi мережі. Одразу після цього пристрій почне надсилати дані на сервер.
	Також, було створено діаграму діяльності (див. рис. 4.6).
 
Рисунок 4.6 – Діаграма діяльності ІоТ частини програмної системи
	Таким чином, за допомогою діаграм пакетів, станів та діяльності були визначені основні технології та архітектура системи. 
Приклади коду IoT-частини системи було наведено в додатку В.1.
 
5 ОПИС ПРОГРАМНОЇ СИСТЕМИ
5.1 Виклик і завантаження


	Для запуску програми, спершу потрібно завантажити архів з кодом програми та разархівувати його. Також, необхідно встановити ядро бази даних MSSQL з офіційного сайту та встановити SDK для Microsoft DotNet версії 8.0 або вище.
	Для налаштування програми для з’єднання з базою даних, потрібно відкрити файл appsettings.json за шляхом “apzkr-pzpi-21-1-bluvband-kirill/Task1-Server/ThermoTsev.Backend.API/appsettings.json” за допомогою будь-якого текстового редактору, та змінити вміст 10 та 13 рядків (виділених жовтим та синім) на рисунку 5.1), вазавши строку з’єднання до бази даних та секретний ключ JWT, який буде використовуватись для підписання токенів авторизації.
 
Рисунок 5.1 – Налаштування системи у файлі appsettings.json
	Після цього потрібно запустити серверну частину системи. Для цього будемо використовувати DotNet CLI. Першим кроком відкриємо наступну директорію в терміналі – «apzkr-pzpi-21-1-bluvband-kirill/Task1-Server/ThermoTsev.Backend.API», після цього напишемо команду dotnet build для створення сборки, та образу після цього команду dotnet run, для запуску серверної частини програмної системи.
	Запуск ІоТ частини відбувається аналогічним за серверну частину шляхом.


5.2 Призначення і логічна структура


	Функції, які може виконувати програма, можна розбити на декілька модулів, а саме:
–	реєстрація та вход;
–	взаємодія з профілями юзерів;
–	статистика системи;
–	перегляд вантажів та взаємодія з ними;
–	перегляд сповіщень та взаємодія з ними;
–	перегляд аналітики та взаємодія з ними;
Модуль «Реєстрація та вход» містить у собі функціонал для авторизації в систему та реєстрацію нового аккаунту. Після реєстрація, данні користувача записуються в базу даних, та дозволяють використовувати імейл та пароль для входу в систему. Користувач може бути адміністратором системи, для цього інший адміністратор повинен проставити йому роль «Адмін», та оновити його профіль, використовуючи модуль взаємодії з профілями юзерів.
Модуль «Взаємодія з профілями юзерів» містить у собі функціонал перегляду та зміни інформації профілей юзерів, а також зміна ролі користувача на адміністратора.
Модуль «Статистика системи» містить у собі функціонал перегляду статистики по системі. Адміністратор може отримати загальну кількість користувачів в системі, середню кількість початих вантажів в день за останній місяць, загальну кількість вантажів за останній тиждень, середню кількість вантажів в день та інше.
Модуль «Перегляд вантажів та взаємодія з ними» містить у собі функціонал перегляду та зміни інформації про вантажі. Користувач може створювати та змінювати вантажі, а також отримувати поточну локацію вантажа.
Модуль «Перегляд сповіщень та взаємодія з ними» містить у собі функціонал перегляду та зміни інформації про сповіщення. Окрім перегляду адміністратором, цей модуль загалом використовується IoT пристроєм.
Модуль «Перегляд аналітики та взаємодія з ними» містить у собі функціонал перегляду та зміни інформації про аналітику. Він, як і попередній модуль, модуль загалом використовується IoT пристроєм, але також доступний для адміністратора.

5.3 Опис програмної реалізації


	Програмною реалізацією для мого застосунку є веб-сторінка Swagger. По-перше, треба знати, що для авторизації ми будемо використовувати JWT токен, який отримуємо як відповідь при логіні. Це допоможе системі ідентифікувати вас як користувача (див рис 5.2 та рис 5.3).
 
Рисунок 5.2 – Авторизація за допомогою JWT токену
 
Рисунок 5.3 – Ввод JWT токену для авторизації
	На нашій сторінці (див. рис. 5.4) ми можемо побачити контролер та групу ендпоітнів для авторизації, реєстрації та взаємодії з користувачами адміністратором. 
 
Рисунок 5.4 – Група Users
	На цій же сторінці ми можемо побачити контролер та групу ендпоінтів для огляду статистики системи (див. рис. 5.5).
 
Рисунок 5.5 – Група Statistics

	На цій же сторінці ми можемо побачити контролер та групу ендпоінтів для огляду та взаємодії з вантажами (див. рис. 5.6).
 
Рисунок 5.6 – Група Shipments
	На цій же сторінці ми можемо побачити контролер та групу ендпоінтів для огляду та взаємодії з екстреними сповіщеннями (див. рис. 5.7).
 
Рисунок 5.7 – Група EmergencyNotification
	На цій же сторінці ми можемо побачити контролер та групу ендпоінтів для огляду та взаємодії з аналітикою (логуванням даних вантажу) (див. рис. 5.8).
 
Рисунок 5.8 – Група Analytics

	Таким чином, були описано можлива взаємодія користувачів та адміністраторів з розробленою програмною системою.
 
ВИСНОВКИ


	В результаті виконаної роботи було розроблено програмне рішення для оптимізації управління ланцюгом поставок термочутливих товарів.
	У процесі розробки було проаналізовано предметну область, створено та спроектовано базу даних та її структуру, розроблено архітектуру серверної та ІоТ частин програмної системи, та реалізовано програмну систему за допомогою ASP.NET Web API за допомогою мови програмування C#.
	Розроблене програмне рішення дозволяє користувачам відстежувати стан товарів протягом усього ланцюга поставок. Воно забезпечує реєстрацію та авторизацію користувачів, керування користувачами адміністратором. Користувачі можуть переглядати інформацію та статистику про вантажі. Система забезпечує моніторинг стану товарів у реальному часі, а також створює сповіщення щодо порушення температурного режиму. Крім того, в системі присутнє адміністрування. Адміністратор має можливість керувати користувачами, вантажами, екстренними сповіщеннями та аналітакою.
 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	Бондарєв В.М. Об'єктно-орієнтоване програмування на С #. Навчальний посібник / В. М. Бондарєв. - Харків: СМІТ, 2009р. - 221 с. (дата звернення: 25.06.2024).
2. 	ASP.NET documentation. Microsoft Learn: Build skills that open doors in your career. URL: https://learn.microsoft.com/en-us/aspnet/core/?view=aspnetcore-8.0 (дата звернення: 25.06.2024)
3.	SQL Server 16 Tecnical Documentation. URL:
https://learn.microsoft.com/en-us/sql/sql-server/?view=sql-server-ver16 (дата звернення: 25.06.2024)
4.	C# 12 Documentation. URL: https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-12 (дата звернення: 25.06.2024)
5.	MQTT documentation. URL: https://mqtt.org/ (дата звернення: 25.06.2024)
 
ДОДАТОК А
Результат перевірки на плагіат
 
Рисунок А.1 – Результат перевірки на плагіат
ДОДАТОК Б
Програмний код серверної частини

	Б.1 Код JWT сервісу на сервері файла JwtService.cs:

1	public class JwtService(IConfiguration configuration) : IJwtService
2	{
3	    public IConfiguration Configuration { get; set; } = configuration;
4	
5	    public string GenerateToken(int userId, Role role)
6	    {
7	        List<Claim> tokenClaims =
8	        [
9	            new Claim(ClaimTypes.Role, role.ToString()),
10	            new Claim(ClaimTypes.NameIdentifier, userId.ToString()),
11	        ];
12	
13	        SymmetricSecurityKey jwtEncKey = new(
14	            Encoding.UTF8.GetBytes(
15	                Configuration.GetSection("Jwt:Token")
16	                    .Value!
17	            )
18	        );
19	        SigningCredentials signingCredentials = new(jwtEncKey, SecurityAlgorithms.HmacSha512Signature);
20	        JwtSecurityToken token = new(
21	            claims: tokenClaims,
22	            expires: DateTime.Now.AddDays(1),
23	            signingCredentials: signingCredentials
24	        );
25	
26	        string? jwt = new JwtSecurityTokenHandler().WriteToken(token);
27	        return jwt;
28	    }
29	}
	
Б.2 Код сервісу для роботи зі статистикою StatisticsService.сі
1	public class StatisticsService(DataContext context) : IStatisticsService
2	{
3	    public Result<List<ShipmentCountPerDayDto>> GetShipmentsStartCountPerDayLastMonth()
4	    {
5	        try
6	        {
7	            DateTime lastMonthStartDate = DateTime.Today.AddMonths(-1);
8	            List<ShipmentCountPerDayDto> shipmentsCountPerDay = context.Shipments
9	                .Where(s => s.StartDate >= lastMonthStartDate)
10	                .GroupBy(s => s.StartDate.Date)
11	                .Select(
12	                    group => new ShipmentCountPerDayDto
13	                    {
14	                        Date = group.Key,
15	                        ShipmentCount = group.Count()
16	                    }
17	                )
18	                .OrderBy(dto => dto.Date)
19	                .ToList();
20	
21	            return Result.Ok(shipmentsCountPerDay);
22	        }
23	        catch (Exception ex)
24	        {
25	            return Result.Fail<List<ShipmentCountPerDayDto>>(ex.Message);
26	        }
27	    }
28	
29	    public Result<List<ShipmentCountPerDayDto>> GetShipmentsEndCountPerDayLastMonth()
30	    {
31	        try
32	        {
33	            DateTime lastMonthStartDate = DateTime.Today.AddMonths(-1);
34	            List<ShipmentCountPerDayDto> shipmentsCountPerDay = context.Shipments
35	                .Where(s => s.EndDate >= lastMonthStartDate)
36	                .GroupBy(s => s.EndDate)
37	                .Select(
38	                    group => new ShipmentCountPerDayDto
39	                    {
40	                        Date = group.Key,
41	                        ShipmentCount = group.Count()
42	                    }
43	                )
44	                .OrderBy(dto => dto.Date)
45	                .ToList();
46	
47	            return Result.Ok(shipmentsCountPerDay);
48	        }
49	        catch (Exception ex)
50	        {
51	            return Result.Fail<List<ShipmentCountPerDayDto>>(ex.Message);
52	        }
53	    }
54	
55	    public Result<int> GetShipmentCountLastWeek()
56	    {
57	        try
58	        {
59	            DateTime lastWeekStartDate = DateTime.Today.AddDays(-7);
60	            int shipmentCount = context.Shipments.Count(s => s.StartDate >= lastWeekStartDate);
61	            return Result.Ok(shipmentCount);
62	        }
63	        catch (Exception ex)
64	        {
65	            return Result.Fail<int>(ex.Message);
66	        }
67	    }
68	
69	    public Result<double> GetAverageShipmentsPerDay()
70	    {
71	        try
72	        {
73	            DateTime startDate = context.Shipments.Min(s => s.StartDate);
74	            DateTime endDate = DateTime.Today;
75	            double totalDays = (endDate - startDate).TotalDays;
76	
77	            if (totalDays <= 0)
78	                return Result.Fail<double>("Invalid date range");
79	
80	            double averageShipmentsPerDay = context.Shipments.Count() / totalDays;
81	            return Result.Ok(averageShipmentsPerDay);
82	        }
83	        catch (Exception ex)
84	        {
85	            return Result.Fail<double>(ex.Message);
86	        }
87	    }
88	
89	    public Result<int> GetUserCount()
90	    {
91	        try
92	        {
93	            int userCount = context.Users.Count();
94	            return Result.Ok(userCount);
95	        }
96	        catch (Exception ex)
97	        {
98	            return Result.Fail<int>(ex.Message);
99	        }
100	    }
101	
102	    public Result<int> GetDeliveredShipmentCount()
103	    {
104	        try
105	        {
106	            int deliveredShipmentCount = context.Shipments.Count(s => s.Status == ShipmentStatus.Delivered);
107	            return Result.Ok(deliveredShipmentCount);
108	        }
109	        catch (Exception ex)
110	        {
111	            return Result.Fail<int>(ex.Message);
112	        }
113	    }
114	}

 
ДОДАТОК В
Програмний код ІоТ пристрою
	В.1 Файл генерації данних DataGenerator.cs
1	public static class DataGenerator
2	{
3	    private static double _defaultLatitude = 50.450001;
4	    private static double _defaultLongitude = 30.523333;
5	    private const double DefaultTemperature = 25.0;
6	
7	    // Метод для отримання даних про місцезнаходження вантажу
8	    public static ShipmentLocation GetShipmentLocation()
9	    {
10	        double latitude = _defaultLatitude + GetOffset();
11	        _defaultLatitude = latitude;
12	        double longitude = _defaultLongitude + GetOffset();
13	        _defaultLongitude = longitude;
14	
15	        return new ShipmentLocation(latitude, longitude);
16	    }
17	
18	    private static double GetOffset() => Random.Shared.NextDouble() * 0.1 - 0.05;
19	
20	    // Метод для отримання даних про стан вантажу
21	    public static ShipmentCondition GetShipmentCondition() => new(DefaultTemperature + GetDeviation());
22	
23	    private static double GetDeviation()
24	    {
25	        bool isNormal = Random.Shared.Next(1, 7) != 3;
26	        double result = Random.Shared.NextDouble() * 5.0 - 2.5;
27	
28	        return isNormal ? result : result * 20;
29	    }
30	}

В.2 Код файлу бекграунд джоби аналізу температури
1	public class ShipmentTemperatureInspector(
2	    IServiceProvider serviceProvider
3	) : BackgroundService
4	{
5	    override async protected Task ExecuteAsync(CancellationToken stoppingToken)
6	    {
7	        while (!stoppingToken.IsCancellationRequested)
8	        {
9	            try
10	            {
11	                List<int> shipmentIdsToProcess = GetShipmentsToProcess().ToList();
12	
13	                foreach (int shipmentId in shipmentIdsToProcess)
14	                {
15	                    await ProcessShipment(shipmentId);
16	                }
17	            }
18	            catch
19	            {
20	                // do nothing
21	            }
22	
23	            await Task.Delay(TimeSpan.FromSeconds(2), stoppingToken);
24	        }
25	    }
26	
27	    private IEnumerable<int> GetShipmentsToProcess()
28	    {
29	        IShipmentService shipmentService = serviceProvider.GetRequiredService<IShipmentService>();
30	
31	        List<Shipment> inTransitShipments = shipmentService.GetShipmentsByStatus(ShipmentStatus.InTransit);
32	
33	        return inTransitShipments.Select(s => s.Id);
34	    }
35	
36	    private async Task ProcessShipment(int shipmentId)
37	    {
38	        IIoTProviderService ioTProviderService = serviceProvider.GetRequiredService<IIoTProviderService>();
39	        IShipmentService shipmentService = serviceProvider.GetRequiredService<IShipmentService>();
40	        IAnalyticsService analyticsService = serviceProvider.GetRequiredService<IAnalyticsService>();
41	
42	        Result<ShipmentInfoDto?> shipmentInfo = await ioTProviderService.GetCurrentShipmentInfo(shipmentId);
43	        Result<Shipment> shipment = shipmentService.GetShipmentById(shipmentId);
44	
45	        if (shipmentInfo.IsSuccess && shipment.IsSuccess)
46	        {
47	            ShipmentInfoDto? shipmentInfoDto = shipmentInfo.Value;
48	
49	            await analyticsService.CreateAnalyticsDetailAsync(shipmentId,
50	                new AnalyticsDetailDto("Temperature", shipmentInfoDto?.Temperature.ToString(CultureInfo.InvariantCulture) ?? string.Empty, DateTime.Now));
51	
52	            if (shipmentInfoDto is not null)
53	            {
54	                await SendEmergencyNotificationIfNeeded(shipment.Value, shipmentInfoDto);
55	            }
56	        }
57	    }
58	
59	    private async Task SendEmergencyNotificationIfNeeded(Shipment shipment, ShipmentInfoDto shipmentInfoDto)
60	    {
61	        IEmergencyNotificationService emergencyNotificationService = serviceProvider.GetRequiredService<IEmergencyNotificationService>();
62	
63	        float temperatureDeviation = CalculateDeviation(shipmentInfoDto.Temperature,
64	            (shipment.ShipmentInfo.MinAllowedTemperature + shipment.ShipmentInfo.MaxAllowedTemperature) / 2);
65	
66	        if (temperatureDeviation > 60)
67	        {
68	            string criticalMessage = $"Critical: Significant deviation in temperature for shipment {shipment.Id}.";
69	            await emergencyNotificationService.CreateEmergencyNotification(shipment.User.Id, new EmergencyNotificationDto(criticalMessage, false));
70	        }
71	
72	        if (temperatureDeviation > 40)
73	        {
74	            string warningMessage = $"Warning: Deviation in temperature for shipment {shipment.Id}.";
75	            await emergencyNotificationService.CreateEmergencyNotification(shipment.User.Id, new EmergencyNotificationDto(warningMessage, false));
76	        }
77	    }
78	
79	    private static float CalculateDeviation(float currentValue, float referenceValue) => Math.Abs(currentValue - referenceValue) / referenceValue * 100;
80	}

